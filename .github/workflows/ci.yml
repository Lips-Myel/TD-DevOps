name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - master
  pull_request:

jobs:
  build:
    name: Install Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Dependencies
        run: npm install

      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

  lint:
    name: Run ESLint
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Restore Dependencies Cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Run ESLint
        run: |
          chmod +x node_modules/.bin/eslint
          npm run lint
        continue-on-error: true

  test:
    name: Run Jest Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Restore Dependencies Cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Run Jest Tests
        run: |
          chmod +x node_modules/.bin/jest
          npx jest --ci --reporters=jest-junit
        continue-on-error: false

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results.xml

  package:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/td-devops:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/td-devops:latest

  staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: package
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Pull Docker Image
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker pull ${{ secrets.DOCKER_USERNAME }}/td-devops:latest

      - name: Stop Previous Staging Container
        run: docker-compose -f compose.staging.yml down || true

      - name: Start New Staging Container
        run: docker-compose -f compose.staging.yml up -d

      - name: Check Logs
        run: docker logs td-devops_app_1 || true

      - name: Health Check
        run: |
          echo "${{ vars.C_CRT }}" > cert.pem
          echo "${{ secrets.C_KEY }}" > key.pem
          chmod 600 cert.pem key.pem
          for i in {1..5}; do 
            curl -v -k -f --cert cert.pem --key key.pem "https://${{ vars.PWD }}-3000.direct.labs.play-with-docker.com" && break || sleep 10
          done || exit 1

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: package
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Pull Docker Image
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker pull ${{ secrets.DOCKER_USERNAME }}/td-devops:latest

      - name: Stop Previous Production Container
        run: docker-compose -f compose.prod.yml down || true

      - name: Start New Production Container
        run: docker-compose -f compose.prod.yml up -d

      - name: Check Logs
        run: docker logs td-devops_app_1 || true

      - name: Health Check
        run: |
          echo "${{ vars.C_CRT }}" > cert.pem
          echo "${{ secrets.C_KEY }}" > key.pem
          chmod 600 cert.pem key.pem
          for i in {1..5}; do 
            curl -v -k -f --cert cert.pem --key key.pem "https://${{ vars.PWD }}-3000.direct.labs.play-with-docker.com" && break || sleep 10
          done || exit 1