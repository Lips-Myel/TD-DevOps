name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    container: node:20.9-alpine
    env:
      PWD: ${{ vars.PWD }}  # Assurez-vous que cette variable est définie dans GitHub Secrets
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: npm install
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

  lint:
    runs-on: ubuntu-latest
    needs: build
    container: node:20.9-alpine
    env:
      PWD: ${{ vars.PWD }}
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: npm install
      - name: Check if eslint is present
        run: ls -l node_modules/.bin/eslint
      - name: Run ESLint
        run: |
          chmod +x node_modules/.bin/eslint
          npm run lint

  test:
      runs-on: ubuntu-latest
      needs: build
      container: node:20.9-alpine
      steps:
        - uses: actions/checkout@v4
        - name: Install dependencies
          run: npm install
        - name: Check if jest is present
          run: ls -l node_modules/.bin/jest
        - name: Make jest executable
          run: chmod +x ./node_modules/.bin/jest
        - name: Run Jest tests
          run: |
            npx jest --ci --reporters=jest-junit
        - name: Upload test results
          uses: actions/upload-artifact@v4
          with:
            name: test-results
            path: test-results.xml

  package:
    runs-on: ubuntu-latest 
    needs: test
    env:
      PWD: ${{ vars.PWD }} 
    steps:
      - uses: actions/checkout@v4
      - name: Build and push Docker image
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker build -t ${{ secrets.DOCKER_REGISTRY }}/app:latest .
          docker push ${{ secrets.DOCKER_REGISTRY }}/app:latest

  staging:
    runs-on: ubuntu-latest
    needs: package
    env:
      PWD: ${{ vars.PWD }}
    steps:
      - uses: actions/checkout@v4
      - name: Deploy to Staging
        run: |
          DEPLOY="https://${{ vars.PWD }}-3000.direct.labs.play-with-docker.com"
          DOCKER_HOST="tcp://${{ vars.PWD }}.direct.labs.play-with-docker.com:2375"

          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker pull ${{ secrets.DOCKER_REGISTRY }}/app:latest

          docker compose -f compose.prod.yml down || true
          docker network rm td-devops_default || true
          docker compose -f compose.prod.yml up -d

          echo "App deployed at => $DEPLOY"
          docker logs td-devops-app-1 || true 

          # Ajout des certificats
          echo "${{ secrets.CLIENT_PEM }}" | base64 --decode > client.pem
          echo "${{ secrets.C_KEY }}" | base64 --decode > key.pem
          chmod 600 client.pem key.pem

          # Test du déploiement avec certificats
          for i in {1..5}; do 
            curl --cert client.pem --key key.pem --ciphers 'AES256-SHA' -v -k -f "$DEPLOY" && break || sleep 10
          done || exit 1


  production:
    runs-on: ubuntu-latest
    needs: package
    env:
      PWD: ${{ vars.PWD }}
    steps:
      - uses: actions/checkout@v4
      - name: Deploy to Production
        run: |
          DEPLOY="https://${{ vars.PWD }}-3000.direct.labs.play-with-docker.com"
          DOCKER_HOST="tcp://${{ vars.PWD }}.direct.labs.play-with-docker.com:2375"

          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker pull ${{ secrets.DOCKER_REGISTRY }}/app:latest

          docker compose -f compose.prod.yml down || true
          docker network rm td-devops_default || true
          docker compose -f compose.prod.yml up -d

          echo "App deployed at => $DEPLOY"
          docker logs td-devops-app-1 || true 

          echo "${{ secrets.CLIENT_PEM }}" | base64 --decode > client.pem
          echo "${{ secrets.C_KEY }}" | base64 --decode > key.pem
          chmod 600 client.pem key.pem

          for i in {1..5}; do 
            curl --cert client.pem --key key.pem --ciphers 'AES256-SHA' -v -k -f "$DEPLOY" && break || sleep 10
          done || exit 1
